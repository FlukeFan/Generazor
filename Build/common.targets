<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>

    <Version>0.0.2</Version>
    <Description>Template based code generation for .NET Core using the Razor SDK.</Description>
    <PackageTags>.NET Core Template Code Generation T4</PackageTags>
    <Authors>Richard Brown</Authors>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/FlukeFan/Generazor</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/FlukeFan/Generazor/master/icon.png</PackageIconUrl>

    <PreserveCompilationContext Condition="$(IsTestProject)=='true'">true</PreserveCompilationContext>
    <CoverageTarget Condition="'$(CoverageTarget)'==''">70</CoverageTarget>
    <NoCoverage Condition="'$(NoCoverage)'==''">false</NoCoverage>

    <BuildUtil>$(MSBuildThisFileDirectory)\BuildUtil\bin\Debug\netcoreapp2.1\Build.BuildUtil.dll</BuildUtil>
    <AltCover>$(NuGetPackageRoot)altcover\5.0.665\tools\netcoreapp2.0\AltCover.dll</AltCover>
    <VsTestConsole>$(MSBuildExtensionsPath)vstest.console.dll</VsTestConsole>
    <ReportGenerator>$(NuGetPackageRoot)reportgenerator\4.0.10\tools\netcoreapp2.0\ReportGenerator.dll</ReportGenerator>

    <TestAssembly>$(AssemblyName).dll</TestAssembly>
    <Quot>"</Quot>
    <SafeFilterTest>$([System.String]::Copy($(FilterTest)).Replace("/", "_fs_").Replace("\", "_bs_").Replace(":", "_col_").Replace("*", "_ast_").Replace("?", "_q_").Replace($(Quot), "_quot_").Replace("&gt;", "_gt_").Replace("&lt;", "_lt_").Replace("|", "_pipe_").Replace(" ", "__"))</SafeFilterTest>
    <TestSuccessFlag>$(AssemblyName).noCoverage$(NoCoverage)_$(SafeFilterTest).success.flg</TestSuccessFlag>
    <CoverageOutput>$(AssemblyName).coverage.xml</CoverageOutput>

  </PropertyGroup>

  <ItemGroup>
    <TestDependencies Include="$(OutDir)\$(AssemblyName).dll" />
    <TestDependencies Include="../**/*.cshtml" />
  </ItemGroup>

  <ItemGroup>
    <CoverageAssemblyFilter Include="NUnit3.TestAdapter" />
    <CoverageTypeFilter Include="AutoGeneratedProgram" />
  </ItemGroup>

  <Target Name="BeforeBuildComplete" AfterTargets="AfterBuild">
    <CallTarget Targets="RunTests" Condition="$(IsTestProject)=='true'" />
  </Target>

  <Target Name="RunTests" Condition="'$(RunTests)'=='true' or '$(FilterTest)'!=''" Inputs="@(TestDependencies)" Outputs="$(OutDir)$(TestSuccessFlag)">
    <CallTarget Targets="RunTestsWithoutCoverage" Condition="'$(FilterTest)'!='' Or '$(NoCoverage)'=='true'" />
    <CallTarget Targets="RunTestsWithCoverage" Condition="'$(FilterTest)'=='' And '$(NoCoverage)'!='true'" />
  </Target>

  <Target Name="RunTestsWithoutCoverage">
    <PropertyGroup>
      <TestStartTime>$([System.DateTime]::Now.AddSeconds(1).ToString(yyyy-MM-dd HH:mm:ss))</TestStartTime>
      <TestCaseFilterOption Condition="'$(FilterTest)'!=''">--testcasefilter:$(FilterTest)</TestCaseFilterOption>
    </PropertyGroup>
    <Message Importance="high" Text="Running tests: $(TestAssembly) without coverage $(TestCaseFilterOption)" />
    <Exec WorkingDirectory="$(OutDir)" Command="dotnet.exe &quot;$(VsTestConsole)&quot; $(TestAssembly) --logger:trx $(TestCaseFilterOption)" />
    <Touch Files="$(OutDir)$(TestSuccessFlag)" Time="$(TestStartTime)" AlwaysCreate="true" />
  </Target>

  <Target Name="RunTestsWithCoverage">
    <PropertyGroup>
      <TestStartTime>$([System.DateTime]::Now.AddSeconds(1).ToString(yyyy-MM-dd HH:mm:ss))</TestStartTime>
    </PropertyGroup>
    <Message Importance="high" Text="Running tests with coverage: $(TestAssembly)" />
    <Exec WorkingDirectory="$(OutDir)" Command="dotnet $(AltCover) --opencover --save --outputDirectory __Instrumented --xmlReport $(CoverageOutput) --assemblyFilter &quot;@(CoverageAssemblyFilter)&quot; --typeFilter &quot;@(CoverageTypeFilter)&quot; --methodFilter &quot;@(CoverageMethodFilter)&quot; --attributeFilter &quot;@(CoverageAttributeFilter)&quot;" />
    <Exec WorkingDirectory="$(OutDir)\__Instrumented" Command="dotnet.exe &quot;$(VsTestConsole)&quot; $(TestAssembly) --logger:trx" />
    <Exec WorkingDirectory="$(OutDir)" Command="dotnet $(AltCover) Runner --collect -r __Instrumented" />
    <RemoveDir Directories="$(OutDir)CoverageReport" />
    <Exec WorkingDirectory="$(OutDir)" Command="dotnet $(ReportGenerator) -reports:$(CoverageOutput) -targetdir:CoverageReport -verbosity:Error -ReportTypes:Html;XmlSummary" />
    <Exec Command="dotnet &quot;$(BuildUtil)&quot; VerifyCoverage $(CoverageTarget) $(OutDir)CoverageReport/Summary.xml" />
    <Touch Files="$(OutDir)$(TestSuccessFlag)" Time="$(TestStartTime)" AlwaysCreate="true" />
  </Target>

  <Target Name="CopyPackageContents" Condition="'$(CopyPackageContent)' == 'true'" BeforeTargets="Compile" Inputs="$(MSBuildProjectDirectory)/obj/project.assets.json" Outputs="bin/content/lastUpdated.flg">
    <Exec Command="dotnet &quot;$(BuildUtil)&quot; CopyPackageContents &quot;$(MSBuildProjectDirectory)/obj/project.assets.json&quot; &quot;$([System.String]::Copy($(NuGetPackageRoot)).TrimEnd('\'))&quot;" />
    <Touch Files="bin/content/lastUpdated.flg" AlwaysCreate="true" />
  </Target>

</Project>